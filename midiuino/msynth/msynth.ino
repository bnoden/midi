#include <avr/eeprom.h>

//starage for ADSR envelope
char adsr[16][4];
//wave shape parameters
char wavePar[8];
//interpolated signed wave samples
char wave[256];

//!!!!! comment in next line for graphics on the oscilloscope
//#define GRAPHICS
#ifdef GRAPHICS

#include "osciGraphics.h"
#endif

typedef unsigned char  uf0p8;

typedef char           f8p0;
typedef unsigned char  uf8p0;

typedef short          f16p0;
typedef unsigned short uf16p0;

typedef unsigned short uf0p16;

typedef long           f32p0;
typedef unsigned long  uf32p0;

typedef long           f8p24;
typedef long           f16p16;
typedef long           f24p8;

typedef unsigned long  uf8p24;
typedef unsigned long  uf16p16;
typedef unsigned long  uf24p8;

typedef unsigned long  f8p8;
typedef unsigned long  uf8p8;

#define f8p24_1     0x1000000
#define f16p16_1    0x10000
#define uf8p24_1    0x1000000
#define uf16p16_1   0x10000
#define f8p8_1      0x100
#define uf8p8_1     0x100

inline f8p0 cast_f8p24_f8p0(f8p24 a)
{
  return ((f8p0*)&a)[3];
}

inline uf8p0 cast_uf8p24_uf8p0(uf8p24 a)
{
  return ((uf8p0*)&a)[3];
}
  
inline f8p0 cast_uf8p0_f8p0(uf8p0 a)
{
  return (f8p0)a;
}

inline uf8p0 cast_f8p0_uf8p0(f8p0 a)
{
  return (uf8p0)a;
}

inline f8p8 cast_f8p24_f8p8(f24p8 a)
{
  f8p8 c;
  ((char*)&c)[0] = ((char*)&a)[2];
  ((char*)&c)[1] = ((char*)&a)[3];
  return c;
}

inline uf8p8 cast_uf8p24_uf8p8(uf24p8 a)
{
  uf8p8 c;
  ((char*)&c)[0] = ((char*)&a)[2];
  ((char*)&c)[1] = ((char*)&a)[3];
  return c;
}

inline f8p8 cast_f16p16_f8p8(f16p16 a)
{
  f8p8 c;
  ((char*)&c)[0] = ((char*)&a)[1];
  ((char*)&c)[1] = ((char*)&a)[2];
  return c;
}

inline f8p0 cast_f24p8_f8p0(f8p24 a)
{
  return ((f8p0*)&a)[3];
}

inline f8p0 cast_f16p16_f8p0(f16p16 a)
{
  return ((f8p0*)&a)[2];
}

inline f8p8 mul_f8p8_uf0p8_f8p8(f8p8 a, uf0p8 b)
{
  f16p16 c = a * b;
  return cast_f16p16_f8p8(c);
}

inline f8p0 mul_f8p8_uf0p8_f8p0(f8p8 a, uf0p8 b)
{
  f16p16 c = a * b;
  return cast_f16p16_f8p0(c);
}

inline f8p0 mul_f8p8_uf0p16_f8p0(f8p8 a, uf0p16 b)
{
  f8p24 c = a * b;
  return cast_f8p24_f8p0(c);
}

inline uf0p8 cast_uf8p24_uf0p8(uf8p24 a)
{
  return ((uf0p8*)&a)[2];
}

inline uf0p16 cast_f8p24_uf0p16(f8p24 a)
{
  uf0p16 c;
  ((char*)&c)[0] = ((char*)&a)[1];
  ((char*)&c)[1] = ((char*)&a)[2];
  return c;
}

inline uf0p16 cast_uf8p24_uf0p16(uf8p24 a)
{  
  uf0p16 c;
  ((char*)&c)[0] = ((char*)&a)[1];
  ((char*)&c)[1] = ((char*)&a)[2];
  return c;
}

inline f8p0 cast_f8p8_f8p0(f8p8 a)
{
  return ((f8p0*)&a)[1];
}

inline uf0p8 cast_uf0p16_uf0p8(f8p8 a)
{
  return ((uf0p8*)&a)[1];
}

inline f8p0 mul_f8p0_uf0p8_f8p0(f8p0 a, uf0p8 b)
{
  f8p8 c = a * b;
  return cast_f8p8_f8p0(c);
}

inline uf0p8 cast_uf0p16_uf0p8(uf0p16 a)
{
  return ((uf0p8*)&a)[1];
}

inline uf0p16 mul_uf0p16_uf0p8_uf0p16(uf0p16 a, uf0p8 b)
{
  uf0p16 c1 = ((uf8p0*)&a)[0] * b;
  uf0p16 c2 = ((uf8p0*)&a)[1] * b + ((uf8p0*)&c1)[1];
  return c2;
}

inline f8p0 mul_uf0p8_uf0p8_uf0p8(uf0p8 a, uf0p8 b)
{
  uf0p16 c = a * b;
  return cast_uf0p16_uf0p8(c);
}


//this frequency table is for 44100Hz
const unsigned long freqIncTab[] PROGMEM = {796254, 843601, 893765, 946911, 1003217, 1062871, 1126073, 1193033, 1263974, 1339134, 1418763, 1503127, 1592507, 1687203, 1787529, 1893821, 2006434, 2125742, 2252146, 2386065, 2527948, 2678268, 2837526, 3006254, 3185015, 3374406, 3575058, 3787642, 4012867, 4251485, 4504291, 4772130, 5055896, 5356535, 5675051, 6012507, 6370030, 6748811, 7150117, 7575285, 8025735, 8502970, 9008582, 9544261, 10111792, 10713070, 11350103, 12025015, 12740059, 13497623, 14300233, 15150569, 16051469, 17005939, 18017165, 19088521, 20223584, 21426141, 22700205, 24050030, 25480119, 26995246, 28600467, 30301139, 32102938, 34011878, 36034330, 38177043, 40447168, 42852281, 45400411, 48100060, 50960238, 53990491, 57200933, 60602278, 64205876, 68023757, 72068660, 76354085, 80894335, 85704563, 90800821, 96200119, 101920476, 107980983, 114401866, 121204555, 128411753, 136047513, 144137319, 152708170, 161788671, 171409126, 181601643, 192400238, 203840952, 215961966, 228803732, 242409110, 256823506, 272095026, 288274639, 305416341, 323577341, 342818251, 363203285, 384800477, 407681904, 431923931, 457607465, 484818220, 513647012, 544190053, 576549277, 610832681, 647154683, 685636503, 726406571, 769600953, 815363807, 863847862, 915214929, 969636441, 1027294024, 1088380105, 1153098554, 1221665363};
const unsigned char compressTab[] PROGMEM = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 4, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 5, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 7, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 9, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 11, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 12, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 13, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 14, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 15, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 16, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 17, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 18, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 19, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 20, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 21, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 22, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 23, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 24, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 25, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 26, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 27, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 28, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 29, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 32, 33, 33, 33, 33, 33, 33, 33, 33, 33, 33, 34, 34, 34, 34, 34, 34, 34, 34, 34, 35, 35, 35, 35, 35, 35, 35, 35, 35, 36, 36, 36, 36, 36, 36, 36, 36, 36, 37, 37, 37, 37, 37, 37, 37, 37, 38, 38, 38, 38, 38, 38, 38, 38, 38, 39, 39, 39, 39, 39, 39, 39, 40, 40, 40, 40, 40, 40, 40, 40, 41, 41, 41, 41, 41, 41, 41, 42, 42, 42, 42, 42, 42, 42, 43, 43, 43, 43, 43, 43, 44, 44, 44, 44, 44, 44, 44, 45, 45, 45, 45, 45, 45, 46, 46, 46, 46, 46, 46, 47, 47, 47, 47, 47, 47, 48, 48, 48, 48, 48, 49, 49, 49, 49, 49, 49, 50, 50, 50, 50, 50, 51, 51, 51, 51, 51, 52, 52, 52, 52, 52, 53, 53, 53, 53, 53, 54, 54, 54, 54, 55, 55, 55, 55, 55, 56, 56, 56, 56, 57, 57, 57, 57, 57, 58, 58, 58, 58, 59, 59, 59, 59, 60, 60, 60, 60, 61, 61, 61, 61, 62, 62, 62, 62, 63, 63, 63, 64, 64, 64, 64, 65, 65, 65, 65, 66, 66, 66, 67, 67, 67, 68, 68, 68, 68, 69, 69, 69, 70, 70, 70, 71, 71, 71, 71, 72, 72, 72, 73, 73, 73, 74, 74, 74, 75, 75, 75, 76, 76, 76, 77, 77, 78, 78, 78, 79, 79, 79, 80, 80, 80, 81, 81, 82, 82, 82, 83, 83, 83, 84, 84, 85, 85, 85, 86, 86, 87, 87, 87, 88, 88, 89, 89, 89, 90, 90, 91, 91, 92, 92, 92, 93, 93, 94, 94, 95, 95, 95, 96, 96, 97, 97, 98, 98, 99, 99, 99, 100, 100, 101, 101, 102, 102, 103, 103, 104, 104, 105, 105, 106, 106, 106, 107, 107, 108, 108, 109, 109, 110, 110, 111, 111, 112, 112, 113, 113, 114, 114, 115, 115, 116, 116, 117, 117, 118, 118, 119, 119, 120, 120, 121, 121, 122, 122, 123, 123, 124, 124, 125, 125, 126, 126, 127, 127, 128, 129, 129, 130, 130, 131, 131, 132, 132, 133, 133, 134, 134, 135, 135, 136, 136, 137, 137, 138, 138, 139, 139, 140, 140, 141, 141, 142, 142, 143, 143, 144, 144, 145, 145, 146, 146, 147, 147, 148, 148, 149, 149, 150, 150, 150, 151, 151, 152, 152, 153, 153, 154, 154, 155, 155, 156, 156, 157, 157, 157, 158, 158, 159, 159, 160, 160, 161, 161, 161, 162, 162, 163, 163, 164, 164, 164, 165, 165, 166, 166, 167, 167, 167, 168, 168, 169, 169, 169, 170, 170, 171, 171, 171, 172, 172, 173, 173, 173, 174, 174, 174, 175, 175, 176, 176, 176, 177, 177, 177, 178, 178, 178, 179, 179, 180, 180, 180, 181, 181, 181, 182, 182, 182, 183, 183, 183, 184, 184, 184, 185, 185, 185, 185, 186, 186, 186, 187, 187, 187, 188, 188, 188, 188, 189, 189, 189, 190, 190, 190, 191, 191, 191, 191, 192, 192, 192, 192, 193, 193, 193, 194, 194, 194, 194, 195, 195, 195, 195, 196, 196, 196, 196, 197, 197, 197, 197, 198, 198, 198, 198, 199, 199, 199, 199, 199, 200, 200, 200, 200, 201, 201, 201, 201, 201, 202, 202, 202, 202, 203, 203, 203, 203, 203, 204, 204, 204, 204, 204, 205, 205, 205, 205, 205, 206, 206, 206, 206, 206, 207, 207, 207, 207, 207, 207, 208, 208, 208, 208, 208, 209, 209, 209, 209, 209, 209, 210, 210, 210, 210, 210, 210, 211, 211, 211, 211, 211, 211, 212, 212, 212, 212, 212, 212, 212, 213, 213, 213, 213, 213, 213, 214, 214, 214, 214, 214, 214, 214, 215, 215, 215, 215, 215, 215, 215, 216, 216, 216, 216, 216, 216, 216, 216, 217, 217, 217, 217, 217, 217, 217, 218, 218, 218, 218, 218, 218, 218, 218, 218, 219, 219, 219, 219, 219, 219, 219, 219, 220, 220, 220, 220, 220, 220, 220, 220, 220, 221, 221, 221, 221, 221, 221, 221, 221, 221, 222, 222, 222, 222, 222, 222, 222, 222, 222, 223, 223, 223, 223, 223, 223, 223, 223, 223, 223, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 224, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 225, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 226, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 227, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 228, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 229, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 230, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 231, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 232, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 233, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 234, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 235, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 236, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 237, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 238, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 239, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 240, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 241, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 242, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 244, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 245, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 246, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 247, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 248, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 249, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 250, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 251, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 252, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 253, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255};
//~reciprocal look up table
const unsigned short rcp[] PROGMEM =  {65535, 32767, 21844, 16383, 13106, 10922, 9361, 8191, 7281, 6553, 5957, 5460, 5040, 4680, 4368, 4095, 3854, 3640, 3448, 3276, 3120, 2978, 2848, 2730, 2620, 2520, 2426, 2340, 2259, 2184, 2113, 2047, 1985, 1927, 1871, 1819, 1770, 1724, 1679, 1637, 1597, 1559, 1523, 1488, 1455, 1424, 1393, 1364, 1336, 1310, 1284, 1259, 1236, 1213, 1191, 1169, 1149, 1129, 1110, 1091, 1073, 1056, 1039, 1023, 1007, 992, 977, 963, 949, 935, 922, 909, 897, 885, 873, 861, 850, 839, 829, 818, 808, 798, 789, 779, 770, 761, 752, 744, 735, 727, 719, 711, 704, 696, 689, 682, 675, 668, 661, 654, 648, 642, 635, 629, 623, 617, 611, 606, 600, 595, 589, 584, 579, 574, 569, 564, 559, 554, 550, 545, 541, 536, 532, 528, 523, 519, 515, 511};

char noteMap[16][128];
#define MAX_NOTES 8

class Note
{
  public:
  unsigned char channel;
  unsigned char note;
  char state;
  //fixed point precalculated parameters
  uf8p24 phase;
  uf8p24 freqInc;
  uf8p24 envelopePhase;
  uf0p16 envelopePhaseIncA;
  uf0p16 envelopePhaseIncD;
  uf0p16 envelopePhaseIncR;
  uf0p8 envelopeAmpS;
  uf0p8 envelopeAmpR;
  uf0p8 envelopeAmp;
  uf0p8 envelopeAmpDeltaS;
  uf0p8 envelopeAmpDeltaA;
  uf0p8 velocity;
  uf0p8 envelopeAmpA;
  
  Note()
  {
    state = -1;
    envelopeAmp = 0;
  }

  void setEnvelope(unsigned char v)
  {
    velocity = (v << 1) + 1;     //scale velocity to [1 - 255]
    //precalculate values
    //each envelope phase counts for 65536 steps (16 bit). the actual time they take is resulting from the increment we count up to thes value
    //the upper 8 bits of the envelope phase indicate in which region of ADSR we are
    envelopePhase = 0;
    envelopePhaseIncA = pgm_read_word(&rcp[adsr[channel][0]]);                         // 1/A
    envelopePhaseIncD = pgm_read_word(&rcp[adsr[channel][1]]);                         // 1/D
    envelopePhaseIncR = pgm_read_word(&rcp[adsr[channel][3]]);                         // 1/R
    envelopeAmpS = mul_uf0p8_uf0p8_uf0p8(velocity, (adsr[channel][2] << 1) + 1);       // S (scaled to 1 - 255) * velocity 
    envelopeAmpDeltaS = velocity - envelopeAmpS;       // delta between max amp
    envelopeAmpDeltaA = velocity - envelopeAmpA;       //delta from 0 or last amplitude if note is replayed 
  }

  void replay(unsigned char v)
  {
    cli();                       //can't interrupt while parameters are changing
    envelopeAmpA = envelopeAmp;  //start from current amplitude to avoid clicks
    setEnvelope(v);              //write new parameters
    sei();
  }
  
  void on(unsigned char ch, unsigned char n, unsigned char v)
  {
    //set note parameters
    channel = ch;
    note = n; 
    phase = 0;
    freqInc = pgm_read_dword(&freqIncTab[n]);
    freqInc <<= 2;  //have to quadruple the increment because of the we went down to a qarter of the frequency
    envelopeAmpA = 0;  //no playing atm start attack from 0
    setEnvelope(v);
    state = 0;  //set statte to plaing
  }
  
  void off()
  {
    cli();                        //not want to interrupt
    envelopeAmpR = envelopeAmp;   //save release amplitude
    if(envelopeAmpR)
      envelopePhase = 0x3000000;  //goto release
    else
      envelopePhase = 0x4000000;  //no relase phase
    sei();
  }
  
  char mix()
  {
    switch(cast_uf8p24_uf8p0(envelopePhase))    //upper 8bits of envelope pahse are taking to identify the phase
    {
      case 0:
        envelopeAmp = envelopeAmpA + mul_uf0p8_uf0p8_uf0p8(cast_uf8p24_uf0p8(envelopePhase), envelopeAmpDeltaA);  //ramping up during Attack pahse to velocity amp
        envelopePhase += envelopePhaseIncA;  //adding the increment. the higher the inc the shorter the attack period
        break;
      case 1:
        envelopeAmp = velocity - mul_uf0p8_uf0p8_uf0p8(cast_uf8p24_uf0p8(envelopePhase), envelopeAmpDeltaS);  //ramping decay down to sustain level
        envelopePhase += envelopePhaseIncD;  //same procedure her as in attack
        break;
      case 2:
        if(!envelopeAmpS)  //if sustain level is zerowe are done here, go to end
        {
          envelopePhase = 0x4000000;
          return 0;
        }
        envelopeAmp = envelopeAmpS;      //set the amplitude to calculated value othervise
        break;
      case 3:
        envelopeAmp = envelopeAmpR - mul_uf0p8_uf0p8_uf0p8(cast_uf8p24_uf0p8(envelopePhase), envelopeAmpR);  //ramp down the last aplitude we saved to zero during the relese pahse 
        envelopePhase += envelopePhaseIncR;  //same as above
        break;
      case 4:
        state = -1;              //done with the note, clear the states
        noteMap[channel][note] = -1;
        return 0;        
    }
    f8p0 s = 0;
    s = wave[cast_uf8p24_uf8p0(phase)];  //read the waveform from the table taking the high 8 bits of the time phase
    s = mul_f8p0_uf0p8_f8p0(s, envelopeAmp);  //mutliplying the wave by the amplutide calculated from the ADSR and velocity above
    phase += freqInc;  //increment the pahase of the wave freqency 
    return s;
  }
};

Note notes[MAX_NOTES];

void noteOff(byte ch, byte n, byte v) 
{
  if(noteMap[ch][n] >= 0)
    notes[noteMap[ch][n]].off();
}

void noteOn(byte ch, byte n, byte v) 
{
  if(!v)
    noteOff(ch, n, 0);
  else
    if(noteMap[ch][n] >= 0)
        notes[noteMap[ch][n]].replay(v);
    else
      for(char i = 0; i < MAX_NOTES; i++)
        if(notes[i].state == -1)
        {
          notes[i].on(ch, n, v);
          noteMap[ch][n] = i;
          return;
        }
}

//calculates the wave samples from the parameters
void generateWave()
{
  for(unsigned int i = 0; i < 256; i++)
  {
    unsigned char par = i >> 5;
    unsigned char phase = i & 31;
    short swave = (wavePar[par] << 1) + (((wavePar[(par + 1) & 7] - wavePar[par]) * phase) >> 4);  //linear interpoaltion using some fixed point between this control point and the next
    wave[i] = swave - 128;  //store a signed sample
  }
}

void control(byte ch, byte c, byte v) 
{
  //knob controls to change ADSR (map other controls if you have another device)
  if(c >= 102 && c <= 105)
  {
      adsr[ch][c - 102] = v;
      if(eeprom_is_ready())  //also store to EEPROM
         eeprom_write_byte((uint8_t*)(ch * 4 + c - 102), v);
        
#ifdef GRAPHICS
      setAdsrLines();  //generate new lines
#endif
  }
  
  //Slider controls fore wave shape (map other controls if you have another device)
  if(c >= 110 && c <= 117)
  {
      wavePar[c - 110] = v;
      if(eeprom_is_ready())  //also store to EEPROM
         eeprom_write_byte((uint8_t*)(16 + c - 110), v);
      generateWave();  //interpolate the new wave form
#ifdef GRAPHICS
      setWaveLines();  //generate new lines
#endif
  }  
}

void setup() 
{
  TIMSK0 = 0;  //disable arduino timers
  Serial1.begin(31250);
  //Serial.begin(115200); //for printing debug to PC
  
  DDRC = 255;

#ifdef GRAPHICS
  setupGraphics();
#endif

  TCCR5A = 0;
  TCCR5B = (1 << WGM52) | (1 << CS50); //clear timer on compare (CTC), no prescaling, reset timer after <OCR5A> cycles
  OCR5A = 16000000L / 11025;
  TIMSK5 = (1 << OCIE5A); //enable interrupt on

  for(char j = 0; j < 16; j++)
  {
    for(char i = 0; i < 127; i++)
      noteMap[j][i] = -1;
    //read ADSR prameters from the EEPROM
    for(char i = 0; i < 4; i++)
      adsr[j][i] = eeprom_read_byte((uint8_t*)(j * 4 + i));
  }
#ifdef GRAPHICS
  setAdsrLines();    //calc the ADSR lines
#endif
  for(char i = 0; i < 8; i++)  //read the wave form parameters from the EEPROM
    wavePar[i] = eeprom_read_byte((uint8_t*)(16 + i));
  generateWave();  //interpolate the wave samples from the parameters
#ifdef GRAPHICS
  setWaveLines();  //set the lines to draw from the wave parameters
#endif
}

ISR(TIMER5_COMPA_vect)
{
  short s = 0;
  for(unsigned char i = 0; i < MAX_NOTES; i++)
    if(notes[i].state >= 0)
    {
      s += notes[i].mix();
    }

  PORTC = pgm_read_byte(&compressTab[s + 2048]);
  
  //this part draws the lines. each pixel at a time
#ifdef GRAPHICS
  if(!lineStep() && lineCount)  //draw pixel and check if more
  {
    //precalculate parameters of next line in row
    calcLine(lines[currentLine][0], lines[currentLine][1], lines[currentLine][2], lines[currentLine][3]);
    currentLine++;
    //al lines drwan start from the beginning
    if(currentLine == lineCount)
      currentLine = 0;
  }
#endif
}

unsigned char count;
unsigned char command[2];
void loop() 
{
  while(Serial1.available())
  {
    unsigned char a = Serial1.read();
    //Serial.println(a);
    if(a > 127)
      count = 0;
    else
    {
      if(count == 2)
      {
        if((command[0] & 0xf0) == 0x90)
          noteOn(command[0] & 0xf, command[1], a);
        if((command[0] & 0xf0) == 0x80)
          noteOff(command[0] & 0xf, command[1], a);
        if((command[0] & 0xf0) == 0xb0)              //control change message
          control(command[0] & 0xf, command[1], a);
        }
    }
    if(count < 2)
      command[count] = a;
    count++;
  }
}
